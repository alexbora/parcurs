--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         3145728 B, 64 B, 12-way associative
Command:          ./date_ex
Data file:        cachegrind.out.19260
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Thresholds:       0.1 100 100 100 100 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   /Users/alex/dev/parcurs/SCRATCH/date_ex.c
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   I1mr            ILmr           Dr                  D1mr             DLmr             Dw                  D1mw            DLmw            Bc                  Bcm                Bi                 Bim              
--------------------------------------------------------------------------------
155,784,122 (100.0%) 22,058 (100.0%) 6,344 (100.0%) 38,180,145 (100.0%) 694,555 (100.0%) 312,125 (100.0%) 18,000,433 (100.0%) 48,739 (100.0%) 39,575 (100.0%) 27,364,472 (100.0%) 1,226,103 (100.0%) 1,900,996 (100.0%) 401,289 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                  I1mr           ILmr         Dr                 D1mr             DLmr             Dw                 D1mw            DLmw            Bc                 Bcm              Bi               Bim               file:function
--------------------------------------------------------------------------------
32,868,353 (21.10%)    35 ( 0.16%)  12 ( 0.19%) 4,739,190 (12.41%)  33,205 ( 4.78%)   4,336 ( 1.39%) 3,511,766 (19.51%)    212 ( 0.43%)     39 ( 0.10%) 7,488,196 (27.36%) 530,805 (43.29%)       0                0           ???:ImageLoader::trieWalk(unsigned char const*, unsigned char const*, char const*)
13,757,529 ( 8.83%)    25 ( 0.11%)  25 ( 0.39%) 4,652,074 (12.18%) 160,372 (23.09%) 160,106 (51.30%)   276,335 ( 1.54%)     78 ( 0.16%)      1 ( 0.00%) 3,390,949 (12.39%)  56,437 ( 4.60%) 168,734 ( 8.88%) 156,140 (38.91%)  ???:ImageLoaderMachOCompressed::rebase(ImageLoader::LinkContext const&, unsigned long)
11,632,611 ( 7.47%)    24 ( 0.11%)   3 ( 0.05%) 2,147,447 ( 5.62%)  46,938 ( 6.76%)  12,646 ( 4.05%)         0               0               0          2,147,447 ( 7.85%)  80,741 ( 6.59%)       0                0           ???:_mapStrHash(_NXMapTable*, void const*)
10,897,881 ( 7.00%)    16 ( 0.07%)   7 ( 0.11%) 2,123,130 ( 5.56%)   6,826 ( 0.98%)   1,581 ( 0.51%)   523,868 ( 2.91%)    218 ( 0.45%)     25 ( 0.06%) 2,694,156 ( 9.85%) 140,171 (11.43%)       0                0           ???:ImageLoaderMachO::libPath(unsigned int) const
 8,400,220 ( 5.39%)    18 ( 0.08%)  18 ( 0.28%) 2,217,369 ( 5.81%)  14,819 ( 2.13%)  14,544 ( 4.66%) 1,562,683 ( 8.68%)      0               0          1,373,145 ( 5.02%)  37,646 ( 3.07%) 366,394 (19.27%) 182,595 (45.50%)  ???:ImageLoaderMachOCompressed::eachLazyBind(ImageLoader::LinkContext const&, unsigned long (ImageLoaderMachOCompressed::*)(ImageLoader::LinkContext const&, unsigned long, unsigned char, char const*, unsigned char, long, long, char const*, ImageLoaderMachOCompressed::LastLookup*, bool))
 7,779,663 ( 4.99%)    13 ( 0.06%)   5 ( 0.08%) 1,431,294 ( 3.75%)   3,465 ( 0.50%)   2,828 ( 0.91%)   606,201 ( 3.37%)      0               0          1,161,927 ( 4.25%)  73,024 ( 5.96%)       0                0           ???:ImageLoader::read_uleb128(unsigned char const*&, unsigned char const*)
 7,011,216 ( 4.50%)    31 ( 0.14%)  27 ( 0.43%) 2,159,168 ( 5.66%)   7,748 ( 1.12%)   6,463 ( 2.07%) 1,416,386 ( 7.87%)     33 ( 0.07%)      0          1,074,434 ( 3.93%)  17,252 ( 1.41%) 219,728 (11.56%)  53,109 (13.23%)  ???:ImageLoaderMachOCompressed::eachBind(ImageLoader::LinkContext const&, unsigned long (ImageLoaderMachOCompressed::*)(ImageLoader::LinkContext const&, unsigned long, unsigned char, char const*, unsigned char, long, long, char const*, ImageLoaderMachOCompressed::LastLookup*, bool))
 5,676,388 ( 3.64%)    54 ( 0.24%)  10 ( 0.16%) 1,563,897 ( 4.10%)   2,474 ( 0.36%)       7 ( 0.00%)   761,222 ( 4.23%)     87 ( 0.18%)     18 ( 0.05%)   805,796 ( 2.94%)  32,196 ( 2.63%) 439,785 (23.13%)     212 ( 0.05%)  ???:ImageLoaderMachO::findExportedSymbol(char const*, bool, char const*, ImageLoader const**) const
 3,719,130 ( 2.39%)     2 ( 0.01%)   2 ( 0.03%) 1,162,224 ( 3.04%)     166 ( 0.02%)       0          1,007,266 ( 5.60%)      8 ( 0.02%)      0             77,482 ( 0.28%)     454 ( 0.04%)       0                0           ???:ImageLoaderMachOCompressed::bindAt(ImageLoader::LinkContext const&, unsigned long, unsigned char, char const*, unsigned char, long, long, char const*, ImageLoaderMachOCompressed::LastLookup*, bool)
 3,544,435 ( 2.28%)    32 ( 0.15%)   8 ( 0.13%)   973,132 ( 2.55%)  12,723 ( 1.83%)       0            631,761 ( 3.51%)      9 ( 0.02%)      0            381,067 ( 1.39%)  34,357 ( 2.80%) 103,084 ( 5.42%)     131 ( 0.03%)  ???:NXMapInsert
 3,334,859 ( 2.14%)    15 ( 0.07%)   1 ( 0.02%) 1,212,676 ( 3.18%)   5,605 ( 0.81%)      29 ( 0.01%)   303,169 ( 1.68%)      0               0                  0                0                0                0           ???:ImageLoaderMachOCompressed::libReExported(unsigned int) const
 3,102,427 ( 1.99%)   126 ( 0.57%)  13 ( 0.20%) 1,068,174 ( 2.80%)     228 ( 0.03%)       0            709,711 ( 3.94%)    122 ( 0.25%)      0            367,945 ( 1.34%)   2,558 ( 0.21%)   7,357 ( 0.39%)      13 ( 0.00%)  ???:ImageLoaderMachOCompressed::resolve(ImageLoader::LinkContext const&, char const*, unsigned char, long, ImageLoader const**, ImageLoaderMachOCompressed::LastLookup*, bool)
 2,837,380 ( 1.82%)    12 ( 0.05%)   4 ( 0.06%)   835,978 ( 2.19%)     348 ( 0.05%)       4 ( 0.00%)   364,239 ( 2.02%)      0               0            579,236 ( 2.12%)      70 ( 0.01%)       0                0           ???:ImageLoader::interposedAddress(ImageLoader::LinkContext const&, unsigned long, ImageLoader const*, ImageLoader const*)
 2,818,742 ( 1.81%)    74 ( 0.34%)   8 ( 0.13%)   783,330 ( 2.05%)  40,544 ( 5.84%)  37,009 (11.86%)   626,041 ( 3.48%)      1 ( 0.00%)      1 ( 0.00%)   391,665 ( 1.43%)   7,663 ( 0.62%)       0                0           ???:ImageLoaderMachO::bindLocation(ImageLoader::LinkContext const&, unsigned long, unsigned long, unsigned char, char const*, long, char const*, char const*, char const*)
 2,393,979 ( 1.54%)     1 ( 0.00%)   1 ( 0.02%)   569,995 ( 1.49%)  44,404 ( 6.39%)  34,966 (11.20%)   455,996 ( 2.53%)      0               0            227,998 ( 0.83%)       5 ( 0.00%)       0                0           ???:ImageLoaderMachOCompressed::interposeAt(ImageLoader::LinkContext const&, unsigned long, unsigned char, char const*, unsigned char, long, long, char const*, ImageLoaderMachOCompressed::LastLookup*, bool)
 2,171,086 ( 1.39%)    51 ( 0.23%)  13 ( 0.20%)   471,168 ( 1.23%)  11,090 ( 1.60%)   2,601 ( 0.83%)    51,927 ( 0.29%)      0               0            432,454 ( 1.58%)  28,654 ( 2.34%)       0                0           ???:strcmp
 2,017,864 ( 1.30%)    33 ( 0.15%)   3 ( 0.05%)   683,994 ( 1.79%)  37,881 ( 5.45%)      67 ( 0.02%)   336,592 ( 1.87%)      5 ( 0.01%)      0            257,048 ( 0.94%)  25,521 ( 2.08%)  91,041 ( 4.79%)     246 ( 0.06%)  ???:_NXMapMember(_NXMapTable*, void const*, void**)
 1,574,288 ( 1.01%)    46 ( 0.21%)   9 ( 0.14%)   500,316 ( 1.31%)  23,561 ( 3.39%)     186 ( 0.06%)   355,756 ( 1.98%)    136 ( 0.28%)     23 ( 0.06%)    99,098 ( 0.36%)     682 ( 0.06%)   1,857 ( 0.10%)      13 ( 0.00%)  ???:ImageLoaderMachOCompressed::findShallowExportedSymbol(char const*, ImageLoader const**) const
 1,561,396 ( 1.00%)     9 ( 0.04%)   1 ( 0.02%)   368,342 ( 0.96%)  45,009 ( 6.48%)     101 ( 0.03%)    44,014 ( 0.24%)     16 ( 0.03%)      0            461,780 ( 1.69%)  21,877 ( 1.78%)       0                0           ???:_mapStrIsEqual(_NXMapTable*, void const*, void const*)
 1,522,245 ( 0.98%)   150 ( 0.68%)   7 ( 0.11%)   321,168 ( 0.84%)   2,696 ( 0.39%)     597 ( 0.19%)    27,638 ( 0.15%)      0               0            357,626 ( 1.31%)  28,098 ( 2.29%)       0                0           ???:_platform_strcmp
 1,376,278 ( 0.88%)    13 ( 0.06%)  13 ( 0.20%)   274,846 ( 0.72%)       7 ( 0.00%)       1 ( 0.00%)   209,511 ( 1.16%)  8,627 (17.70%)  8,613 (21.76%)   340,185 ( 1.24%)   4,079 ( 0.33%)       0                0           ???:__sanitizer::SizeClassAllocator32<__sanitizer::AP32>::PopulateFreeList(__sanitizer::AllocatorStats*, __sanitizer::SizeClassAllocator32LocalCache<__sanitizer::SizeClassAllocator32<__sanitizer::AP32> >*, __sanitizer::SizeClassAllocator32<__sanitizer::AP32>::SizeClassInfo*, unsigned long)
 1,349,870 ( 0.87%)   612 ( 2.77%)  29 ( 0.46%)   551,283 ( 1.44%)  12,430 ( 1.79%)       1 ( 0.00%)    93,530 ( 0.52%)    264 ( 0.54%)     61 ( 0.15%)   383,863 ( 1.40%)   1,761 ( 0.14%)   1,747 ( 0.09%)       4 ( 0.00%)  ???:dyld::loadPhase5(char const*, char const*, dyld::LoadContext const&, unsigned int&, std::__1::vector<char const*, std::__1::allocator<char const*> >*)
 1,341,385 ( 0.86%)    13 ( 0.06%)   4 ( 0.06%)   789,050 ( 2.07%)     666 ( 0.10%)     141 ( 0.05%)   315,620 ( 1.75%)    149 ( 0.31%)      7 ( 0.02%)         0                0           78,905 ( 4.15%)     212 ( 0.05%)  ???:ImageLoaderMachO::segActualLoadAddress(unsigned int) const
 1,306,980 ( 0.84%)    87 ( 0.39%)  10 ( 0.16%)   253,511 ( 0.66%)      14 ( 0.00%)       1 ( 0.00%)   180,906 ( 1.01%)      1 ( 0.00%)      0            254,757 ( 0.93%)   1,296 ( 0.11%)       0                0           ???:__sel_registerName(char const*, int, int)
 1,224,112 ( 0.79%)     1 ( 0.00%)   0            688,563 ( 1.80%)   1,117 ( 0.16%)     574 ( 0.18%)   306,028 ( 1.70%)      0               0                  0                0           76,507 ( 4.02%)       9 ( 0.00%)  ???:ImageLoaderMachO::segSize(unsigned int) const
 1,208,154 ( 0.78%)     3 ( 0.01%)   2 ( 0.03%)   402,718 ( 1.05%)       0                0            201,359 ( 1.12%)      0               0                  0                0                0                0           ???:ImageLoaderMachOCompressed::segmentCommandOffsets() const
   891,061 ( 0.57%)    21 ( 0.10%)   2 ( 0.03%)   243,866 ( 0.64%)   1,243 ( 0.18%)     196 ( 0.06%)       743 ( 0.00%)      0               0            322,154 ( 1.18%)     978 ( 0.08%)       0                0           ???:dyld::findMappedRange(unsigned long)
   847,044 ( 0.54%)    10 ( 0.05%)   2 ( 0.03%)   346,518 ( 0.91%)     190 ( 0.03%)       0            269,514 ( 1.50%)     31 ( 0.06%)      2 ( 0.01%)         0                0           77,004 ( 4.05%)       2 ( 0.00%)  ???:ImageLoaderMachO::segActualEndAddress(unsigned int) const
   724,514 ( 0.47%)     8 ( 0.04%)   6 ( 0.09%)        22 ( 0.00%)       2 ( 0.00%)       0            526,976 ( 2.93%)  8,404 (17.24%)  8,384 (21.19%)    65,796 ( 0.24%)      47 ( 0.00%)       0                0           ???:__sanitizer::internal_memset(void*, int, unsigned long)
   690,372 ( 0.44%)     3 ( 0.01%)   2 ( 0.03%)   345,186 ( 0.90%)     664 ( 0.10%)     381 ( 0.12%)   153,416 ( 0.85%)      0               0                  0                0           38,354 ( 2.02%)       1 ( 0.00%)  ???:ImageLoaderMachO::segWriteable(unsigned int) const
   616,176 ( 0.40%)    20 ( 0.09%)   4 ( 0.06%)   147,062 ( 0.39%)   6,123 ( 0.88%)   1,034 ( 0.33%)    12,387 ( 0.07%)      0               0            185,218 ( 0.68%)  11,394 ( 0.93%)       0                0           ???:_platform_strncmp
   579,051 ( 0.37%)    63 ( 0.29%)   2 ( 0.03%)   210,564 ( 0.55%)   3,442 ( 0.50%)     539 ( 0.17%)    52,641 ( 0.29%)      0               0                  0                0                0                0           ???:ImageLoaderMachOCompressed::libImage(unsigned int) const
   536,076 ( 0.34%)     4 ( 0.02%)   2 ( 0.03%)    97,716 ( 0.26%)       0                0             23,436 ( 0.13%)      0               0            155,256 ( 0.57%)   3,380 ( 0.28%)       0                0           ???:copySwiftV1MangledName(char const*, bool)
   518,434 ( 0.33%)     0            0            222,186 ( 0.58%)   1,622 ( 0.23%)       0             74,062 ( 0.41%)      0               0                  0                0                0                0           ???:ImageLoader::matchInstallPath() const
   465,150 ( 0.30%)     5 ( 0.02%)   1 ( 0.02%)   124,040 ( 0.32%)       0                0            124,040 ( 0.69%)      1 ( 0.00%)      0                  0                0                0                0           ???:NXMapGet
   453,376 ( 0.29%)     3 ( 0.01%)   2 ( 0.03%)    66,814 ( 0.17%)     386 ( 0.06%)     113 ( 0.04%)     1,302 ( 0.01%)      0               0             64,210 ( 0.23%)   1,321 ( 0.11%)       0                0           ???:ImageLoader::hash(char const*)
   448,050 ( 0.29%)    57 ( 0.26%)   3 ( 0.05%)   120,498 ( 0.32%)      84 ( 0.01%)      12 ( 0.00%)    92,118 ( 0.51%)      0               0             60,207 ( 0.22%)   3,560 ( 0.29%)       0                0           ???:void std::__1::__insertion_sort<method_t::SortBySELAddress&, entsize_list_tt<method_t, method_list_t, 3u>::iterator>(entsize_list_tt<method_t, method_list_t, 3u>::iterator, entsize_list_tt<method_t, method_list_t, 3u>::iterator, method_t::SortBySELAddress&)
   393,354 ( 0.25%) 1,082 ( 4.91%)  76 ( 1.20%)    64,138 ( 0.17%)   3,508 ( 0.51%)      51 ( 0.02%)    14,166 ( 0.08%)    162 ( 0.33%)     11 ( 0.03%)   105,325 ( 0.38%)   4,809 ( 0.39%)     569 ( 0.03%)     383 ( 0.10%)  ???:ImageLoaderMachO::sniffLoadCommands(macho_header const*, char const*, bool, bool*, unsigned int*, unsigned int*, ImageLoader::LinkContext const&, linkedit_data_command const**, encryption_info_command const**)
   384,950 ( 0.25%)    45 ( 0.20%)  13 ( 0.20%)    88,832 ( 0.23%)      58 ( 0.01%)       0             81,418 ( 0.45%)      0               0             44,416 ( 0.16%)      42 ( 0.00%)      17 ( 0.00%)      13 ( 0.00%)  ???:ImageLoaderMachOCompressed::exportedSymbolAddress(ImageLoader::LinkContext const&, ImageLoader::Symbol const*, ImageLoader const*, bool) const
   356,520 ( 0.23%)    29 ( 0.13%)   6 ( 0.09%)    79,409 ( 0.21%)   5,178 ( 0.75%)     264 ( 0.08%)    32,827 ( 0.18%)      3 ( 0.01%)      0             77,418 ( 0.28%)   2,456 ( 0.20%)       0                0           ???:getsectiondata
   317,469 ( 0.20%)    11 ( 0.05%)   7 ( 0.11%)   110,745 ( 0.29%)     455 ( 0.07%)       3 ( 0.00%)    73,830 ( 0.41%)    259 ( 0.53%)     36 ( 0.09%)    14,766 ( 0.05%)       0            7,383 ( 0.39%)      25 ( 0.01%)  ???:ImageLoaderMachOCompressed::resolveTwolevel(ImageLoader::LinkContext const&, char const*, ImageLoader const*, ImageLoader const*, unsigned int, bool, bool, ImageLoader const**)
   295,320 ( 0.19%)    31 ( 0.14%)   4 ( 0.06%)   103,362 ( 0.27%)       5 ( 0.00%)       0             73,830 ( 0.41%)    137 ( 0.28%)     12 ( 0.03%)     7,383 ( 0.03%)      14 ( 0.00%)  14,766 ( 0.78%)      15 ( 0.00%)  ???:ImageLoader::findExportedSymbolAddress(ImageLoader::LinkContext const&, char const*, ImageLoader const*, int, bool, ImageLoader const**, unsigned long*) const
   292,699 ( 0.19%)     9 ( 0.04%)   7 ( 0.11%)    72,310 ( 0.19%)   1,521 ( 0.22%)     336 ( 0.11%)     9,509 ( 0.05%)      0               0             82,062 ( 0.30%)   3,762 ( 0.31%)       0                0           ???:strncmp
   283,816 ( 0.18%)     1 ( 0.00%)   1 ( 0.02%)        72 ( 0.00%)       6 ( 0.00%)       0             70,942 ( 0.39%) 17,729 (36.38%) 17,709 (44.75%)    70,870 ( 0.26%)      34 ( 0.00%)       0                0           ???:allocBuckets(void*, unsigned int)
   283,701 ( 0.18%)    43 ( 0.19%)  39 ( 0.61%)    68,783 ( 0.18%)   5,470 ( 0.79%)   4,439 ( 1.42%)    52,998 ( 0.29%)     19 ( 0.04%)      8 ( 0.02%)    35,229 ( 0.13%)   1,895 ( 0.15%)     327 ( 0.02%)       1 ( 0.00%)  ???:_read_images
   277,523 ( 0.18%)   395 ( 1.79%)  10 ( 0.16%)    80,680 ( 0.21%)  11,530 ( 1.66%)       0             40,539 ( 0.23%)      0               0             58,661 ( 0.21%)     258 ( 0.02%)  20,073 ( 1.06%)      10 ( 0.00%)  ???:dyld::checkandAddImage(ImageLoader*, dyld::LoadContext const&)
   275,910 ( 0.18%)     4 ( 0.02%)   3 ( 0.05%)    58,588 ( 0.15%)   8,064 ( 1.16%)       0             25,266 ( 0.14%)      7 ( 0.01%)      0             66,724 ( 0.24%)   9,507 ( 0.78%)       0                0           ???:_NXMapRehash(_NXMapTable*)
   262,316 ( 0.17%)     8 ( 0.04%)   7 ( 0.11%)    58,140 ( 0.15%)   7,254 ( 1.04%)   3,224 ( 1.03%)       257 ( 0.00%)      0               0             58,246 ( 0.21%)     241 ( 0.02%)       0                0           ???:bcmp
   250,127 ( 0.16%)    40 ( 0.18%)  28 ( 0.44%)    85,091 ( 0.22%)     224 ( 0.03%)       6 ( 0.00%)    43,765 ( 0.24%)     18 ( 0.04%)      7 ( 0.02%)    46,690 ( 0.17%)   1,151 ( 0.09%)   1,432 ( 0.08%)      13 ( 0.00%)  ???:ImageLoader::weakBind(ImageLoader::LinkContext const&)
   240,500 ( 0.15%)     3 ( 0.01%)   2 ( 0.03%)   100,142 ( 0.26%)  37,083 ( 5.34%)      77 ( 0.02%)    20,108 ( 0.11%)      0               0             20,108 ( 0.07%)      13 ( 0.00%)       0                0           ???:ImageLoaderMachO::getInstallPath() const
   215,068 ( 0.14%)    37 ( 0.17%)  37 ( 0.58%)    39,565 ( 0.10%)   3,639 ( 0.52%)   3,227 ( 1.03%)    20,870 ( 0.12%)     57 ( 0.12%)      7 ( 0.02%)    42,858 ( 0.16%)   2,740 ( 0.22%)   5,570 ( 0.29%)   1,311 ( 0.33%)  ???:ImageLoaderMachO::parseLoadCmds(ImageLoader::LinkContext const&)
   214,712 ( 0.14%)     5 ( 0.02%)   5 ( 0.08%)    59,652 ( 0.16%)   7,602 ( 1.09%)   4,781 ( 1.53%)    29,914 ( 0.17%)      0               0             35,580 ( 0.13%)   1,895 ( 0.15%)       0                0           ???:readClass(objc_class*, bool, bool)
   214,125 ( 0.14%)     8 ( 0.04%)   8 ( 0.13%)    19,800 ( 0.05%)       2 ( 0.00%)       2 ( 0.00%)     4,800 ( 0.03%)      0               0             23,013 ( 0.08%)   2,161 ( 0.18%)       0                0           ???:transtime
   213,337 ( 0.14%)     3 ( 0.01%)   2 ( 0.03%)   116,294 ( 0.30%)   3,711 ( 0.53%)       2 ( 0.00%)    19,448 ( 0.11%)      0               0             19,448 ( 0.07%)       2 ( 0.00%)       0                0           ???:ImageLoader::statMatch(stat const&) const
   198,219 ( 0.13%)   394 ( 1.79%)   5 ( 0.08%)    40,275 ( 0.11%)      51 ( 0.01%)       0             20,433 ( 0.11%)      0               0             39,091 ( 0.14%)     203 ( 0.02%)       0                0           ???:dyld::findLoadedImage(stat const&)
   198,063 ( 0.13%)   109 ( 0.49%)   8 ( 0.13%)    24,225 ( 0.06%)      94 ( 0.01%)       1 ( 0.00%)    62,905 ( 0.35%)    458 ( 0.94%)     74 ( 0.19%)    45,901 ( 0.17%)     845 ( 0.07%)     425 ( 0.02%)     423 ( 0.11%)  ???:dyld_stub_binder
   186,996 ( 0.12%)    40 ( 0.18%)  36 ( 0.57%)    63,921 ( 0.17%)   1,499 ( 0.22%)       1 ( 0.00%)    31,797 ( 0.18%)    185 ( 0.38%)      4 ( 0.01%)    19,057 ( 0.07%)     802 ( 0.07%)  10,596 ( 0.56%)      18 ( 0.00%)  ???:ImageLoader::recursiveLoadLibraries(ImageLoader::LinkContext const&, bool, ImageLoader::RPathChain const&, char const*)
   156,795 ( 0.10%)   202 ( 0.92%)  81 ( 1.28%)    38,530 ( 0.10%)       0                0             21,907 ( 0.12%)    130 ( 0.27%)     63 ( 0.16%)    25,177 ( 0.09%)   3,008 ( 0.25%)   8,379 ( 0.44%)      50 ( 0.01%)  ???:_qsort

--------------------------------------------------------------------------------
-- User-annotated source: /Users/alex/dev/parcurs/SCRATCH/date_ex.c
--------------------------------------------------------------------------------
Ir           I1mr       ILmr       Dr          D1mr       DLmr       Dw          D1mw       DLmw       Bc           Bcm         Bi         Bim        

-- line 40 ----------------------------------------
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .           static const char *mths = "ian feb mar apr mai iun iul aug sep oct noi dec";
  .          .          .           .          .          .           .          .          .            .           .          .          .           static char longdate[128], *luna;
  .          .          .           .          .          .           .          .          .            .           .          .          .           static int dayz;
  .          .          .           .          .          .           .          .          .            .           .          .          .           static struct tm TM;
  .          .          .           .          .          .           .          .          .            .           .          .          .           static int days_past;
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .           static inline char *literal_mon(const int month) {
 16 ( 0.00%) 1 ( 0.00%) 1 ( 0.02%)  0          0          0           0          0          0            2 ( 0.00%)  0          0          0             return &"ianuarie\0\0\0\0\0\0\0\0februari"
  .          .          .           .          .          .           .          .          .            .           .          .          .                     "e\0\0\0"
  .          .          .           .          .          .           .          .          .            .           .          .          .                     "\0\0\0\0martie\0\0\0\0\0\0\0\0\0\0aprilie\0\0\0\0\0\0\0\0\0mai\0"
  .          .          .           .          .          .           .          .          .            .           .          .          .                     "\0\0\0\0"
  .          .          .           .          .          .           .          .          .            .           .          .          .                     "\0\0\0\0\0\0\0\0iunie\0\0\0\0\0\0\0\0\0\0\0iulie\0\0\0\0\0\0\0\0"
  .          .          .           .          .          .           .          .          .            .           .          .          .                     "\0\0\0au"
  .          .          .           .          .          .           .          .          .            .           .          .          .                     "gust\0\0\0\0\0\0\0\0\0\0septembrie\0\0\0\0\0\0octombrie\0\0\0\0"
  .          .          .           .          .          .           .          .          .            .           .          .          .                     "\0\0\0noi"
  .          .          .           .          .          .           .          .          .            .           .          .          .                     /* "embrie\0\0\0\0\0\0\0decembrie\0\0\0\0\0\0\0"[16 * month]; */
  2 ( 0.00%) 0          0           0          0          0           0          0          0            1 ( 0.00%)  1 ( 0.00%) 0          0                     "embrie\0\0\0\0\0\0\0decembrie\0\0\0\0\0\0\0"[month << 4];
  .          .          .           .          .          .           .          .          .            .           .          .          .           }
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .           /* static inline unsigned days_in_month(const int month, const int year) */
  .          .          .           .          .          .           .          .          .            .           .          .          .           /* { */
  .          .          .           .          .          .           .          .          .            .           .          .          .           /*   if (month == 4 || month == 6 || month == 9 || month == 11) */
  .          .          .           .          .          .           .          .          .            .           .          .          .           /*     return 30; */
  .          .          .           .          .          .           .          .          .            .           .          .          .           /*   else if (month == 2) */
  .          .          .           .          .          .           .          .          .            .           .          .          .           /*     return (((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) ? 29 */
-- line 65 ----------------------------------------
-- line 69 ----------------------------------------
  .          .          .           .          .          .           .          .          .            .           .          .          .           /* } */
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .           static inline int is_leap3(const int year) {
  .          .          .           .          .          .           .          .          .            .           .          .          .             int y = year + 16000;
  .          .          .           .          .          .           .          .          .            .           .          .          .             return (y % 100) ? !(y % 4) : !(y % 16);
  .          .          .           .          .          .           .          .          .            .           .          .          .           }
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .           static inline int last_day_of_mon(int year, int mon) {
  6 ( 0.00%) 3 ( 0.01%) 3 ( 0.05%)  0          0          0           0          0          0            1 ( 0.00%)  1 ( 0.00%) 0          0             return mon != 2 ? ((mon ^ (mon >> 3))) | 30 : is_leap3(year) ? 29 : 28;
  .          .          .           .          .          .           .          .          .            .           .          .          .           }
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .           static inline int days_from_civil(int y, const int m, const int d) {
  .          .          .           .          .          .           .          .          .            .           .          .          .             y -= m <= 2;
  .          .          .           .          .          .           .          .          .            .           .          .          .             const int era = (y >= 0 ? y : y - 399) / 400;
  .          .          .           .          .          .           .          .          .            .           .          .          .             const int yoe = (y - era * 400);                                 // [0, 399]
  .          .          .           .          .          .           .          .          .            .           .          .          .             const int doy = (153 * (m > 2 ? m - 3 : m + 9) + 2) / 5 + d - 1; // [0, 365]
  .          .          .           .          .          .           .          .          .            .           .          .          .             const int doe = yoe * 365 + yoe / 4 - yoe / 100 + doy; // [0, 146096]
  .          .          .           .          .          .           .          .          .            .           .          .          .             return era * 146097 + doe - 719468;
  .          .          .           .          .          .           .          .          .            .           .          .          .           }
  .          .          .           .          .          .           .          .          .            .           .          .          .           
 90 ( 0.00%) 0          0           0          0          0           0          0          0           30 ( 0.00%)  2 ( 0.00%) 0          0           static inline int weekday_from_days(const int z) { return (z + 4) % 7; }
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .           static int now() {
  .          .          .           .          .          .           .          .          .            .           .          .          .             /* normal time */
 13 ( 0.00%) 3 ( 0.01%) 2 ( 0.03%)  4 ( 0.00%) 0          0           7 ( 0.00%) 1 ( 0.00%) 0            0           0          0          0             struct tm tm = *localtime(&(time_t){time(NULL)});
  .          .          .           .          .          .           .          .          .            .           .          .          .             /* printf("Today is           %s", asctime(&tm)); */
 11 ( 0.00%) 1 ( 0.00%) 1 ( 0.02%)  0          0          0           5 ( 0.00%) 0          0            0           0          0          0             printf("Today is           %s", asctime(&*localtime(&(time_t){time(NULL)})));
 18 ( 0.00%) 1 ( 0.00%) 1 ( 0.02%)  3 ( 0.00%) 0          0           2 ( 0.00%) 0          0            2 ( 0.00%)  1 ( 0.00%) 0          0             sprintf(longdate, "%02d.%02d.%d", tm.tm_mday, tm.tm_mon + 1,
  .          .          .           .          .          .           .          .          .            .           .          .          .                     tm.tm_year + 1900);
  .          .          .           .          .          .           .          .          .            .           .          .          .             /* goto previous */
  4 ( 0.00%) 0          0           0          0          0           1 ( 0.00%) 0          0            1 ( 0.00%)  1 ( 0.00%) 0          0             tm.tm_mon -= 1;
  .          .          .           .          .          .           .          .          .            .           .          .          .             /* reset to the first of month */
  1 ( 0.00%) 0          0           0          0          0           1 ( 0.00%) 0          0            0           0          0          0             tm.tm_mday = 1;
  .          .          .           .          .          .           .          .          .            .           .          .          .             /* adjust year to jump to previous if december */
  4 ( 0.00%) 1 ( 0.00%) 1 ( 0.02%)  0          0          0           1 ( 0.00%) 0          0            1 ( 0.00%)  0          0          0             tm.tm_year = tm.tm_mon != 11 ? tm.tm_year : tm.tm_year - 1;
  1 ( 0.00%) 0          0           0          0          0           1 ( 0.00%) 0          0            0           0          0          0             mktime(&tm); // tm_isdst is not set to -1; today's DST status is used
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  9 ( 0.00%) 1 ( 0.00%) 1 ( 0.02%)  4 ( 0.00%) 0          0           4 ( 0.00%) 1 ( 0.00%) 1 ( 0.00%)   0           0          0          0             TM = tm;
  .          .          .           .          .          .           .          .          .            .           .          .          .             /* days_past = days_from_civil(TM.tm_year + 1900, TM.tm_mon + 1, 1); */
  6 ( 0.00%) 1 ( 0.00%) 1 ( 0.02%)  1 ( 0.00%) 0          0           1 ( 0.00%) 1 ( 0.00%) 1 ( 0.00%)   0           0          0          0             days_past = (int)(ti / ONE_DAY);
  .          .          .           .          .          .           .          .          .            .           .          .          .             return 1;
  .          .          .           .          .          .           .          .          .            .           .          .          .           }
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .           static int then(char **argv) {
  .          .          .           .          .          .           .          .          .            .           .          .          .             char *m = strstr(mths, argv[1]);
  .          .          .           .          .          .           .          .          .            .           .          .          .             int mon = (int)((m - mths) / 4);
  .          .          .           .          .          .           .          .          .            .           .          .          .             int year = 2000 + atoi(argv[2]);
  .          .          .           .          .          .           .          .          .            .           .          .          .             struct tm tm2 = {.tm_sec = 50,
-- line 116 ----------------------------------------
-- line 123 ----------------------------------------
  .          .          .           .          .          .           .          .          .            .           .          .          .             sprintf(longdate, "%02d.%02d.%d", tm2.tm_mday, tm2.tm_mon + 1, tm2.tm_year);
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .             TM = tm2;
  .          .          .           .          .          .           .          .          .            .           .          .          .             days_past = days_from_civil(year, mon + 1, 1);
  .          .          .           .          .          .           .          .          .            .           .          .          .             return 1;
  .          .          .           .          .          .           .          .          .            .           .          .          .           }
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .           static int cmdl(int argc, char **argv) {
  2 ( 0.00%) 0          0           0          0          0           0          0          0            1 ( 0.00%)  0          0          0             if (argc > 2)
  .          .          .           .          .          .           .          .          .            .           .          .          .               return then(argv);
  .          .          .           .          .          .           .          .          .            .           .          .          .             return now();
  .          .          .           .          .          .           .          .          .            .           .          .          .           }
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .           static void globals() {
  3 ( 0.00%) 0          0           1 ( 0.00%) 0          0           1 ( 0.00%) 0          0            0           0          0          0             luna = literal_mon(TM.tm_mon);
  .          .          .           .          .          .           .          .          .            .           .          .          .             /* dayz = days_in_month(TM.tm_mon + 1, TM.tm_year); */
  6 ( 0.00%) 0          0           2 ( 0.00%) 0          0           1 ( 0.00%) 0          0            1 ( 0.00%)  0          0          0             dayz = last_day_of_mon(TM.tm_year, TM.tm_mon + 1);
122 ( 0.00%) 1 ( 0.00%) 1 ( 0.02%) 30 ( 0.00%) 0          0           0          0          0           31 ( 0.00%)  2 ( 0.00%) 0          0             for (int i = 0; i < dayz; i++) {
450 ( 0.00%) 2 ( 0.01%) 2 ( 0.03%) 30 ( 0.00%) 0          0          30 ( 0.00%) 1 ( 0.00%) 1 ( 0.00%) 150 ( 0.00%) 10 ( 0.00%) 0          0               arr[i] = weekday_from_days(days_past + i);
  .          .          .           .          .          .           .          .          .            .           .          .          .             }
  .          .          .           .          .          .           .          .          .            .           .          .          .           }
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .           __attribute__((noreturn)) static void usage() {
  .          .          .           .          .          .           .          .          .            .           .          .          .             puts("Usage: <mon> <year> <km>\ne.g. iun 22 80000\n");
  .          .          .           .          .          .           .          .          .            .           .          .          .             exit(0);
  .          .          .           .          .          .           .          .          .            .           .          .          .           }
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .           static int init_time(int argc, char **argv) {
  2 ( 0.00%) 0          0           0          0          0           0          0          0            1 ( 0.00%)  1 ( 0.00%) 0          0             if (argc > 1 && (*argv[1] == 'h' || strcmp(argv[1], "-h") == 0 ||
  .          .          .           .          .          .           .          .          .            .           .          .          .                              strcmp(argv[1], "--h") == 0))
  .          .          .           .          .          .           .          .          .            .           .          .          .               usage();
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  4 ( 0.00%) 1 ( 0.00%) 1 ( 0.02%)  0          0          0           1 ( 0.00%) 0          0            0           0          0          0             setenv("TZ", "/usr/share/zoneinfo/Europe/Bucharest", 1); // POSIX-specific
  3 ( 0.00%) 1 ( 0.00%) 1 ( 0.02%)  0          0          0           2 ( 0.00%) 1 ( 0.00%) 1 ( 0.00%)   0           0          0          0             ti = time(0);
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .             cmdl(argc, argv);
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .             globals();
  .          .          .           .          .          .           .          .          .            .           .          .          .           
  .          .          .           .          .          .           .          .          .            .           .          .          .             return 0;
  .          .          .           .          .          .           .          .          .            .           .          .          .           }
  .          .          .           .          .          .           .          .          .            .           .          .          .           
 10 ( 0.00%) 1 ( 0.00%) 1 ( 0.02%)  0          0          0           6 ( 0.00%) 0          0            0           0          0          0           int main(int argc, char *argv[]) {
  .          .          .           .          .          .           .          .          .            .           .          .          .             init_time(argc, argv);
  5 ( 0.00%) 1 ( 0.00%) 1 ( 0.02%)  1 ( 0.00%) 0          0           1 ( 0.00%) 0          0            0           0          0          0             printf("current: %s\t last month: %s\t days of last mo: %d\n", longdate, luna,
  .          .          .           .          .          .           .          .          .            .           .          .          .                    dayz);
  4 ( 0.00%) 1 ( 0.00%) 1 ( 0.02%)  1 ( 0.00%) 0          0           1 ( 0.00%) 0          0            0           0          0          0             printf("past: %d\n", days_past);
  5 ( 0.00%) 0          0           1 ( 0.00%) 0          0           1 ( 0.00%) 0          0            0           0          0          0             printf("%d\n", arr[0]);
  6 ( 0.00%) 0          0           1 ( 0.00%) 0          0           1 ( 0.00%) 0          0            1 ( 0.00%)  0          0          0             printf("%d\n", arr[1]);
  6 ( 0.00%) 1 ( 0.00%) 1 ( 0.02%)  1 ( 0.00%) 0          0           1 ( 0.00%) 0          0            1 ( 0.00%)  0          0          0             printf("%d\n", arr[2]);
  9 ( 0.00%) 0          0           7 ( 0.00%) 1 ( 0.00%) 0           0          0          0            0           0          0          0             return 0;
  .          .          .           .          .          .           .          .          .            .           .          .          .           }

339 ( 0.00%) 1 ( 0.00%) 1 ( 0.02%)  0          0          0           0          0          0            0           0          0          0           <counts for unidentified lines in /Users/alex/dev/parcurs/SCRATCH/date_ex.c>

--------------------------------------------------------------------------------
Ir           I1mr        ILmr        Dr          D1mr       DLmr       Dw          D1mw       DLmw       Bc           Bcm         Bi         Bim        
--------------------------------------------------------------------------------
818 ( 0.00%) 21 ( 0.10%) 20 ( 0.32%) 87 ( 0.00%) 1 ( 0.00%) 0          69 ( 0.00%) 5 ( 0.01%) 4 ( 0.01%) 224 ( 0.00%) 19 ( 0.00%) 0          0           events annotated

