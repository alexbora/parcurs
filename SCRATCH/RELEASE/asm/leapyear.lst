     1                                  ;name: leapyear.asm
     2                                  ;
     3                                  ;Build:    nasm "-felf64" leapyear.asm -l leapyear.lst -o leapyear.o
     4                                  ;
     5                                  ;description: the function calculates if a year in rdi (hexadecimal) is leap or not.
     6                                  ;             rax returns 0 if not leap otherwise 1
     7                                  
     8                                  
     9                                  bits 64
    10                                  
    11                                  global _leapyear
    12                                  
    13                                  section .text
    14                                  
    15                                  _leapyear:
    16 00000000 53                          push	rbx                ; save used registers
    17 00000001 51                          push	rcx
    18 00000002 52                          push	rdx
    19 00000003 4889F8                      mov		rax, rdi
    20 00000006 4831C9                      xor		rcx, rcx           ; assume not leap, rcx = 0
    21 00000009 48A903000000                test	rax, 3             ; last two bits 0?
    22 0000000F 751E                        jnz		.@1                ; if not year is not disible by 4 -> no leapyear
    23 00000011 48FFC1                      inc		rcx                ; assume year is a leapyear, rcx = 1
    24 00000014 4831D2                      xor		rdx, rdx           ; prepare rdx for division
    25 00000017 BB64000000                  mov		rbx, 100           ; year / 100
    26 0000001C 48F7F3                      div		rbx
    27 0000001F 4821D2                      and		rdx, rdx           ; remainder = 0?
    28 00000022 750B                        jnz		.@1                ; no, no leapyear
    29                                      ; multiples of 100 aren't leap years except if last two bits
    30                                      ; are zero 0 (divisible by 4) then also divisible by 400
    31 00000024 48A903000000                test	rax, 3
    32 0000002A 7403                        jz		.@1                ; yes, leap year
    33 0000002C 48FFC9                      dec		rcx                ; no, not leap year, rcx = 0
    34                                  .@1:
    35 0000002F 4889C8                      mov		rax, rcx           ; mov result in RAX
    36 00000032 5A                          pop		rdx
    37 00000033 59                          pop		rcx
    38 00000034 5B                          pop		rbx
    39 00000035 C3                          ret
